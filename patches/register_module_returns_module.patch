diff --git a/source/app/blueprints/manage/manage_modules_routes.py b/source/app/blueprints/manage/manage_modules_routes.py
index 26c37866..79522fd8 100644
--- a/source/app/blueprints/manage/manage_modules_routes.py
+++ b/source/app/blueprints/manage/manage_modules_routes.py
@@ -52,6 +52,7 @@ from app.util import ac_api_requires
 from app.util import ac_requires
 from app.util import response_error
 from app.util import response_success
+from app.schema.marshables import IrisModuleSchema
 
 manage_modules_blueprint = Blueprint(
     'manage_module',
@@ -124,14 +125,15 @@ def add_module(caseid):
             return response_error("Cannot import module. Health check didn't pass. Please check logs below", data=logs)
 
         # Registers into Iris DB for further calls
-        mod_id, logs = register_module(module_name)
-        if mod_id is None:
+        module, message = register_module(module_name)
+        if module is None:
             track_activity(f"addition of IRIS module {module_name} was attempted and failed",
                            caseid=caseid, ctx_less=True)
-            return response_error("Unable to register module", data=logs)
+            return response_error(f'Unable to register module: {message}')
 
         track_activity(f"IRIS module {module_name} was added", caseid=caseid, ctx_less=True)
-        return response_success("", data=logs)
+        module_schema = IrisModuleSchema()
+        return response_success(message, data=module_schema.dump(module))
 
     except Exception as e:
         traceback.print_exc()
diff --git a/source/app/datamgmt/iris_engine/modules_db.py b/source/app/datamgmt/iris_engine/modules_db.py
index c1770334..2cfb94af 100644
--- a/source/app/datamgmt/iris_engine/modules_db.py
+++ b/source/app/datamgmt/iris_engine/modules_db.py
@@ -63,7 +63,7 @@ def iris_module_add(module_name, module_human_name, module_description,
     except Exception:
         return None
 
-    return im.id
+    return im
 
 
 def is_mod_configured(mod_config):
diff --git a/source/app/iris_engine/module_handler/module_handler.py b/source/app/iris_engine/module_handler/module_handler.py
index 3657b3bc..b5d4b49b 100644
--- a/source/app/iris_engine/module_handler/module_handler.py
+++ b/source/app/iris_engine/module_handler/module_handler.py
@@ -257,25 +257,25 @@ def register_module(module_name):
 
     if not module_name:
         log.error("Provided module has no names")
-        return None, ["Module has no names"]
+        return None, "Module has no names"
 
     try:
 
         mod_inst, _ = instantiate_module_from_name(module_name=module_name)
         if not mod_inst:
             log.error("Module could not be instantiated")
-            return None, ["Module could not be instantiated"]
+            return None, "Module could not be instantiated"
 
         if iris_module_exists(module_name=module_name):
             log.warning("Module already exists in Iris")
-            return None, ["Module already exists in Iris"]
+            return None, "Module already exists in Iris"
 
         # Auto parse the configuration and fill with default
         log.info('Parsing configuration')
         mod_config = preset_init_mod_config(mod_inst.get_init_configuration())
 
         log.info('Adding module')
-        modu_id = iris_module_add(module_name=module_name,
+        module = iris_module_add(module_name=module_name,
                                   module_human_name=mod_inst.get_module_name(),
                                   module_description=mod_inst.get_module_description(),
                                   module_config=mod_config,
@@ -286,16 +286,16 @@ def register_module(module_name):
                                   module_type=mod_inst.get_module_type()
                                   )
 
-        if not modu_id:
-            return None, ["Unable to register module"]
+        if module is None:
+            return None, "Unable to register module"
 
         if mod_inst.get_module_type() == 'module_processor':
-            mod_inst.register_hooks(module_id=modu_id)
+            mod_inst.register_hooks(module_id=module.id)
 
     except Exception as e:
-        return None, ["Fatal - {}".format(e.__str__())]
+        return None, "Fatal - {}".format(e.__str__())
 
-    return modu_id, ["Module registered"]
+    return module, "Module registered"
 
 
 def iris_update_hooks(module_name, module_id):
diff --git a/source/app/post_init.py b/source/app/post_init.py
index 9dac7d35..ac18c497 100644
--- a/source/app/post_init.py
+++ b/source/app/post_init.py
@@ -1443,21 +1443,21 @@ def register_default_modules():
     modules = ['iris_vt_module', 'iris_misp_module', 'iris_check_module',
                'iris_webhooks_module', 'iris_intelowl_module']
 
-    for module in modules:
-        class_, _ = instantiate_module_from_name(module)
+    for module_name in modules:
+        class_, _ = instantiate_module_from_name(module_name)
         is_ready, logs = check_module_health(class_)
 
         if not is_ready:
-            log.info("Attempted to initiate {mod}. Got {err}".format(mod=module, err=",".join(logs)))
+            log.info("Attempted to initiate {mod}. Got {err}".format(mod=module_name, err=",".join(logs)))
             return False
 
-        mod_id, logs = register_module(module)
-        if mod_id is None:
-            log.info("Attempted to add {mod}. Got {err}".format(mod=module, err=",".join(logs)))
+        module, logs = register_module(module_name)
+        if module is None:
+            log.info("Attempted to add {mod}. Got {err}".format(mod=module_name, err=",".join(logs)))
 
         else:
-            iris_module_disable_by_id(mod_id)
-            log.info('Successfully registered {mod}'.format(mod=module))
+            iris_module_disable_by_id(module.id)
+            log.info('Successfully registered {mod}'.format(mod=module_name))
 
 def custom_assets_symlinks():
     try:
diff --git a/source/app/schema/marshables.py b/source/app/schema/marshables.py
index 591ed3ef..c1537ddc 100644
--- a/source/app/schema/marshables.py
+++ b/source/app/schema/marshables.py
@@ -72,6 +72,7 @@ from app.models.authorization import Group
 from app.models.authorization import Organisation
 from app.models.authorization import User
 from app.models.cases import CaseState
+from app.models import IrisModule
 from app.util import file_sha256sum, str_to_bool
 from app.util import stream_sha256sum
 
@@ -995,3 +996,8 @@ class SavedFilterSchema(ma.SQLAlchemyAutoSchema):
         include_fk = True
         include_relationships = True
 
+
+class IrisModuleSchema(ma.SQLAlchemyAutoSchema):
+    class Meta:
+        model = IrisModule
+        load_instance = True
